---

- name: Add/remove users
  user:
    name: "{{ item.key }}"
    createhome: "{{ item.value.createhome|default(True) }}"
    shell: "{{ item.value.shell|default('/bin/bash') }}"
    generate_ssh_key: "{{ item.value.generate_ssh_key|default(False) }}"
    state: "{{ item.value.present|default('present') }}"
    password: "{{ item.value.password|default('') }}"
    update_password: "{{ item.value.update_password|default('always') }}"
    groups: "{{ item.value.groups|default('') }}"
  with_dict: "{{ users.users }}"
  when: item.value.state is not defined or item.value.state != 'ignored'
  tags:
    - users-users

- name: Add user accounts to sudoers
  template:
    src: sudoers.j2
    dest: /etc/sudoers.d/{{ item.key }}
    owner: root
    group: root
    mode: "0440"
    validate: 'visudo -cf %s'
  with_dict: "{{ users.users }}"
  when: item.value.sudoers is defined and item.value.sudoers
  tags:
    - users-sudoers

- name: Remove empty or unmanaged sudoers files
  file:
    path: /etc/sudoers.d/{{ item.key }}
    state: absent
  with_dict: "{{ users.users }}"
  when: item.value.sudoers is not defined or not item.value.sudoers
  tags:
    - users-sudoers

- name: Fetch all public ssh keys from all nodes
  shell: cat {{ users.ssh.fetch_key }}
  register: users_ssh_keys
  changed_when: false
  when: users.ssh.fetch_key and users.ssh.deploy_key_user
  tags:
    - users-ssh

- name: Print fetched public keys
  debug: msg="{{ users_ssh_keys.stdout }}"
  when: users.ssh.fetch_key and users.ssh.deploy_key_user
  tags:
    - users-ssh

- name: Deploy fetched keys to all hosts except same host on specific user
  authorized_key:
    user: "{{ users.ssh.deploy_key_user }}"
    key: "{{ hostvars[item]['users_ssh_keys']['stdout'] }}"
  with_items:
    - "{{ play_hosts }}"
  when: users.ssh.fetch_key and users.ssh.deploy_key_user and ansible_hostname != item
  tags:
    - users-ssh

- name: Fetch all public ssh host keys from all nodes
  shell: cat /etc/ssh/ssh_host_ecdsa_key.pub
  register: users_ssh_host_keys
  changed_when: false
  when: users.ssh.known_hosts_path and users.ssh.deploy_key_user
  tags:
    - users-ssh
    - users-ssh-host-keys

- name: Print fetched public host keys
  debug: msg="{{ users_ssh_host_keys.stdout }}"
  when: users.ssh.known_hosts_path and users.ssh.deploy_key_user
  tags:
    - users-ssh
    - users-ssh-host-keys

- name: Add hosts to known hosts of each other
  known_hosts:
    path: "{{ users.ssh.known_hosts_path }}"
    name: "{{ item }}"
    key: "{{ item }} {{ hostvars[item]['users_ssh_host_keys']['stdout'] }}"
    state: present
  with_items:
    - "{{ play_hosts }}"
  when: users.ssh.known_hosts_path and users.ssh.deploy_key_user and ansible_hostname != item
  tags:
    - users-ssh
    - users-ssh-host-keys

- name: Check if known_hosts file exists
  stat:
    path: "{{ users.ssh.known_hosts_path }}"
  register: users_known_hosts
  tags:
    - users-ssh
    - users-ssh-host-keys

- name: Fix known_hosts file owner
  file:
    path: "{{ users.ssh.known_hosts_path }}"
    owner: "{{ users.ssh.deploy_key_user }}"
    group: "{{ users.ssh.deploy_key_user }}"
  when: users.ssh.known_hosts_path and users.ssh.deploy_key_user and users_known_hosts.stat.exists
  tags:
    - users-ssh
    - users-ssh-host-keys

- name: Generate user ssh config file for current user and host in user home directory
  template:
    src: ssh_user_config.j2
    dest: ~/ssh_user_config_for_host_{{ inventory_hostname }}
  when:
  tags:
    - users-ssh
    - users-ssh-config
